openapi: 3.0.1
info:
  title: Course API
  description: Course MicroService
  version: "2.0"
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /courses:
    get:
      tags:
      - my-controller
      summary: This is to fetch All the Books stored in Db
      operationId: getCourses
      responses:
        "200":
          description: Fetched All the Books form Db
          content:
            application/json: {}
        "404":
          description: NOt Available
    put:
      tags:
      - my-controller
      operationId: updateCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Course'
    post:
      tags:
      - my-controller
      operationId: addCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Course'
  /courses/{courseId}:
    get:
      tags:
      - my-controller
      operationId: getCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Course'
    put:
      tags:
      - my-controller
      operationId: addCourses
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      tags:
      - my-controller
      operationId: deleteCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                enum:
                - 100 CONTINUE
                - 101 SWITCHING_PROTOCOLS
                - 102 PROCESSING
                - 103 CHECKPOINT
                - 200 OK
                - 201 CREATED
                - 202 ACCEPTED
                - 203 NON_AUTHORITATIVE_INFORMATION
                - 204 NO_CONTENT
                - 205 RESET_CONTENT
                - 206 PARTIAL_CONTENT
                - 207 MULTI_STATUS
                - 208 ALREADY_REPORTED
                - 226 IM_USED
                - 300 MULTIPLE_CHOICES
                - 301 MOVED_PERMANENTLY
                - 302 FOUND
                - 302 MOVED_TEMPORARILY
                - 303 SEE_OTHER
                - 304 NOT_MODIFIED
                - 305 USE_PROXY
                - 307 TEMPORARY_REDIRECT
                - 308 PERMANENT_REDIRECT
                - 400 BAD_REQUEST
                - 401 UNAUTHORIZED
                - 402 PAYMENT_REQUIRED
                - 403 FORBIDDEN
                - 404 NOT_FOUND
                - 405 METHOD_NOT_ALLOWED
                - 406 NOT_ACCEPTABLE
                - 407 PROXY_AUTHENTICATION_REQUIRED
                - 408 REQUEST_TIMEOUT
                - 409 CONFLICT
                - 410 GONE
                - 411 LENGTH_REQUIRED
                - 412 PRECONDITION_FAILED
                - 413 PAYLOAD_TOO_LARGE
                - 413 REQUEST_ENTITY_TOO_LARGE
                - 414 URI_TOO_LONG
                - 414 REQUEST_URI_TOO_LONG
                - 415 UNSUPPORTED_MEDIA_TYPE
                - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                - 417 EXPECTATION_FAILED
                - 418 I_AM_A_TEAPOT
                - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                - 420 METHOD_FAILURE
                - 421 DESTINATION_LOCKED
                - 422 UNPROCESSABLE_ENTITY
                - 423 LOCKED
                - 424 FAILED_DEPENDENCY
                - 425 TOO_EARLY
                - 426 UPGRADE_REQUIRED
                - 428 PRECONDITION_REQUIRED
                - 429 TOO_MANY_REQUESTS
                - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                - 500 INTERNAL_SERVER_ERROR
                - 501 NOT_IMPLEMENTED
                - 502 BAD_GATEWAY
                - 503 SERVICE_UNAVAILABLE
                - 504 GATEWAY_TIMEOUT
                - 505 HTTP_VERSION_NOT_SUPPORTED
                - 506 VARIANT_ALSO_NEGOTIATES
                - 507 INSUFFICIENT_STORAGE
                - 508 LOOP_DETECTED
                - 509 BANDWIDTH_LIMIT_EXCEEDED
                - 510 NOT_EXTENDED
                - 511 NETWORK_AUTHENTICATION_REQUIRED
  /courses/search/{query}:
    get:
      tags:
      - my-controller
      operationId: search
      parameters:
      - name: query
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /courses/page/{offset}/{pageSize}:
    get:
      tags:
      - my-controller
      operationId: getCoursesWithPagination
      parameters:
      - name: offset
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCourse'
  /courses/field/{field}:
    get:
      tags:
      - my-controller
      operationId: getCoursesWithSort
      parameters:
      - name: field
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
    PageCourse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Course'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
